datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Chapter {
  id       String @id @default(uuid())
  slug     String @unique
  title    String
  duration Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ChapterStep ChapterStep[]
}model ChapterStep {
  id    Int @id @default(autoincrement())
  order Int

  courseContent   CourseContent @relation(fields: [courseContentId], references: [id])
  courseContentId String

  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}model Course {
  id           String  @id @default(uuid())
  slug         String  @unique
  title        String
  notionPageId String
  imageUrl     String?
  duration     Int

  chapters      Chapter[]
  prerequisites Prerequisite[] @relation(references: [id])
  tags          Tag[]          @relation(references: [id])
  technologies          Technology[]          @relation(references: [id])

  formation   Formation @relation(fields: [formationId], references: [id])
  formationId String

  diffiulty   Difficulty @relation(fields: [diffiultyId], references: [id])
  diffiultyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}model CourseContent {
  id           String  @id @default(uuid())
  slug         String  @unique
  title        String
  notionPageId String
  imageUrl     String?
  duration     Int

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ChapterStep ChapterStep[]
}model Difficulty {
  id       Int     @id @default(autoincrement())
  slug     String  @unique
  name     String  @unique
  imageUrl String?

  courses Course[]
}model Formation {
  id           String  @id @default(uuid())
  slug         String  @unique
  title        String
  notionPageId String
  imageUrl     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course[]
}model Prerequisite {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  courses Course[] @relation(references: [id])
}model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}
model Tag {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String @unique

  courses Course[] @relation(references: [id])
}model Technology {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String @unique
  imageUrl String?
  courses Course[] @relation(references: [id])
}
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isEmailVerified Boolean  @default(false)
  isAdmin Boolean

  role   Role? @relation(fields: [roleId], references: [id])
  roleId Int? @default(1)
}